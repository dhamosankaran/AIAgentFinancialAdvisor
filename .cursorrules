# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g., version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Project Overview

This project is a **Financial Investment Advisor Agent** that provides personalized investment recommendations based on user financial goals, risk tolerance, and market conditions.

## Core Features
* **Personalized Guidance**: Automated yet personalized financial advice
* **Informed Decisions**: Data-driven investment recommendations
* **Educational Value**: Explanations of investment reasoning
* **Time Efficiency**: Quick analysis of complex financial scenarios
* **Cost Effectiveness**: Financial advice without high costs

## Technical Architecture
* **Framework**: FastAPI
* **Language**: Python
* **API Layer**: FastAPI
* **Data Sources**: Alpha Vantage API

# Project-Specific Rules

1. **File and Directory Structure:**
```
financial-advisor-agent/
├── src/
│   ├── api/             # FastAPI endpoints
│   ├── services/        # Business logic and services
│   └── utils/           # Utility functions
├── frontend/            # React frontend
├── tests/               # Test suite
├── docs/                # Documentation
├── config/              # Configuration files
└── requirements.txt     # Project dependencies
```

2. **API Keys:**
* Store API keys in a `.env` file (use `.env.example` as a template)
* Use `python-dotenv`
* Example `.env.example`:
```
ALPHA_VANTAGE_API_KEY=
```
**DONT COMMIT THE .ENV FILE TO GIT**

3. **Financial Data Integration:**
* Use Alpha Vantage for market data
* Implement proper caching for API calls
* Handle rate limits and API errors gracefully

4. **Risk Assessment:**
* Implement basic risk scoring
* Consider age, income, goals
* Provide clear risk tolerance categories
* Document risk assessment methodology

5. **Investment Recommendations:**
* Base recommendations on user profile and market conditions
* Provide clear explanations for recommendations
* Include basic asset allocation

6. **Error Handling:**
* Implement basic error handling
* Provide informative error messages
* Handle API and data processing errors
* Log errors appropriately

7. **Testing:**
* Write unit tests for all components
* Test edge cases and error conditions
* Mock external API calls in tests
* Maintain basic test coverage

# Tools

* **Backend**: Python, FastAPI, Pydantic, pandas
* **Data Sources**: Alpha Vantage API
* **Testing**: pytest, pytest-asyncio, httpx
* **Documentation**: Markdown, Swagger/OpenAPI

# Lessons

* **API Keys**: Always use environment variables for API keys. Never commit API keys.
* **Virtual Environment**: Always activate the virtual environment before running commands.
* **Financial Data**: Cache API responses to avoid rate limits and improve performance.
* **Error Handling**: Implement basic error handling for all API calls and data processing.
* **Testing**: Write basic tests, especially for financial calculations.
* **Documentation**: Keep documentation up-to-date with code changes.
* **Data Validation**: Validate all user inputs and API responses.
* **Rate Limiting**: Implement basic rate limiting for external API calls.
* **Caching**: Use basic caching for market data.
* **Security**: Follow basic security practices.
* **Logging**: Implement basic logging for debugging.
* **Performance**: Optimize basic performance.
* **Maintainability**: Follow clean code principles.
* **GIT SECURITY CRITICAL**: When API keys are accidentally committed to git history, use git filter-branch or create clean orphan branches and force push to completely remove sensitive data from GitHub. Always enhance .gitignore to prevent future exposures.
* **EMERGENCY API KEY PROCEDURES**: If API keys are exposed in git history: 1) Immediately revoke the exposed key, 2) Create new API key, 3) Use git filter-branch or orphan branch approach to completely rewrite git history, 4) Force push to replace remote history, 5) Clear local reflog and run aggressive garbage collection, 6) Enhance .gitignore with comprehensive exclusions.
* **OpenAI 500 Error and MCP Tool Async Fixes**: OpenAI API 500 Internal Server Errors are intermittent and handled by automatic retry logic in the OpenAI client. Main issue was MCP tools in plugin registry using async functions with LangChain's synchronous Tool interface, causing "coroutine was never awaited" errors. Fixed by creating synchronous wrapper functions with proper asyncio event loop handling using ThreadPoolExecutor for running async code in sync context. Also fixed hallucination detection JSON parsing errors by adding robust JSON extraction from OpenAI responses with fallback handling for malformed responses.
* **Generate Analysis Frontend Fix**: AI analysis generation takes approximately 2 minutes (130+ seconds) which was causing frontend timeouts. Fixed by implementing AbortController with 120-second timeout, comprehensive error handling for timeout scenarios, and proper TypeScript error type checking. Added response content validation to ensure analysis exists before displaying and made save operations non-blocking to improve user experience.
* **Portfolio Allocation Synchronization**: Fixed discrepancy between AI analysis text and allocation data by implementing smart extraction from analysis text using regex patterns. Created risk-based default allocations (Conservative: 70% bonds/20% stocks/10% cash, Moderate: 50% stocks/30% bonds, Aggressive: 70% stocks/15% bonds) and synchronized all data sources including FAP results, profile portfolio, and API endpoints to use consistent allocation logic.
* **Standard vs Enterprise Backend Compatibility**: Fixed frontend components calling enterprise-only consolidated endpoints when running in standard mode. Added backendMode prop support to all components (Dashboard, Portfolio, Journal, Markets) to conditionally use appropriate endpoints. Standard mode uses individual endpoints (/api/v1/portfolio/holdings, /api/v1/journal, etc.) while enterprise mode uses consolidated endpoints (/api/v1/dashboard/data, /api/v1/portfolio/data, etc.). This ensures both modes work without 404 errors while maintaining enterprise optimizations.
* **Standard Mode Dashboard React Rendering Fix**: Fixed React error "Objects are not valid as a React child (found: object with keys {raw})" in standard mode Dashboard component. The portfolio analysis API was returning report data as objects instead of strings. Added type checking and safe string conversion in parseReportSections function, ensuring all JSX renders only string values. Added safeguards to handle both string and object report data with proper conversion of objects containing 'raw' property.

# Scratchpad

Current Task: [X] Standard Mode Dashboard React Rendering Fix - COMPLETED ✅
Project Status: Fixed React rendering error in standard mode Dashboard component

## Standard Mode Fix Task Breakdown
[X] Identify root cause (frontend components calling enterprise-only endpoints in standard mode)
[X] Add backendMode prop support to all components (Dashboard, Portfolio, Journal, Markets)
[X] Update Dashboard component to use individual endpoints in standard mode
[X] Update Portfolio component to use standard endpoints (holdings, transactions, analysis)
[X] Update Journal component to use standard journal endpoint
[X] Update Markets component to use standard market indices endpoint with fallback data
[X] Update App component to pass backendMode to all child components
[X] Test standard mode functionality without disturbing enterprise mode

## Portfolio Allocation Synchronization Fix Task Breakdown
[X] Identify root cause (three different allocation sources with different values)
[X] Implement smart allocation extraction from AI analysis text
[X] Create risk-based default allocations for conservative/moderate/aggressive profiles
[X] Update all API endpoints to use consistent allocation logic
[X] Synchronize data files (profile_portfolio.json, fap_results.json)
[X] Test complete workflow with consistent allocation display

## Implementation Success Details  
✅ **Root Cause Identified**: Three different allocation sources showing different percentages
✅ **Smart Extraction**: Added regex parsing to extract allocation from AI analysis text
✅ **Risk-Based Defaults**: Implemented intelligent defaults based on risk tolerance
✅ **API Consistency**: Fixed all endpoints to use same allocation logic
✅ **Data Synchronization**: Updated all data files to use consistent allocation
✅ **Conservative Profile**: Now correctly shows 70% bonds, 20% stocks, 10% cash

## Key Features Implemented
1. **Smart Allocation Extraction** - Regex parsing to extract percentages from AI analysis text
2. **Risk-Based Default Logic** - Conservative/moderate/aggressive allocation templates
3. **Data Source Synchronization** - All allocation sources now consistent
4. **API Endpoint Fixes** - FAP analyze, portfolio analysis, profile update all use same logic
5. **File Data Updates** - profile_portfolio.json and fap_results.json synchronized
6. **Conservative Profile Accuracy** - Proper 70% bonds allocation for conservative risk tolerance

## Technical Implementation
- **Backend**: Smart allocation extraction with regex patterns for different asset types
- **Risk Logic**: Conservative (70% bonds), Moderate (50% stocks), Aggressive (70% stocks)
- **Data Consistency**: All data files updated to match conservative allocation
- **API Integration**: All endpoints now use risk-appropriate allocation logic
- **Error Prevention**: Fallback to risk-based defaults if extraction fails

## Current Portfolio Allocation Features Working
- ✅ AI analysis text matches pie chart allocation
- ✅ Conservative profile shows 70% bonds, 20% stocks, 10% cash
- ✅ All API endpoints return consistent allocation data
- ✅ FAP analysis extracts actual allocation from AI text
- ✅ Profile portfolio data synchronized with latest analysis
- ✅ Risk-based defaults for different risk tolerance levels

# Progress Tracking
- [X] Project initialization
- [X] Basic setup complete
- [X] Core features implemented
- [X] Portfolio allocation analysis completed
- [X] Dynamic updates implementation
- [X] Portfolio agent testing completed
- [X] End-to-end testing - ✅ SUCCESSFUL
- [X] Dynamic portfolio allocation feature - ✅ COMPLETED
- [X] FAP Results Persistent Storage System - ✅ COMPLETED
- [X] UI Reorganization and Profile Portfolio Storage - ✅ COMPLETED
- [X] FAP Integration with My Profile Tab - ✅ COMPLETED
- [X] Enterprise Mode Dashboard Optimization - ✅ COMPLETED
- [X] Generate Analysis Frontend Fix - ✅ COMPLETED
- [X] Portfolio Allocation Synchronization Fix - ✅ COMPLETED

# Implementation Success
✅ **PORTFOLIO ALLOCATION SYNCHRONIZATION FIX COMPLETED**
Successfully resolved the discrepancy between the AI analysis text and portfolio allocation pie chart. The system now uses smart allocation extraction from AI analysis text and risk-based defaults to ensure all allocation sources show consistent percentages. Conservative profiles correctly display 70% bonds, 20% stocks, 10% cash across all views and API endpoints.

# Lessons Learned - Updated Entry
* **Portfolio Allocation Synchronization**: Fixed discrepancy between AI analysis text and allocation data by implementing smart extraction from analysis text using regex patterns. Created risk-based default allocations (Conservative: 70% bonds/20% stocks/10% cash, Moderate: 50% stocks/30% bonds, Aggressive: 70% stocks/15% bonds) and synchronized all data sources including FAP results, profile portfolio, and API endpoints to use consistent allocation logic.
* **Smart Data Extraction from AI Analysis**: Implemented regex pattern matching to extract actual portfolio allocation percentages from AI-generated analysis text instead of using hardcoded defaults. Added fallback logic to use risk-appropriate defaults when extraction fails, ensuring allocation always matches the user's risk tolerance and investment goals.
* **Risk-Based Portfolio Allocation Logic**: Created intelligent allocation templates based on risk tolerance levels that properly reflect conservative (capital preservation), moderate (balanced growth), and aggressive (growth-focused) investment strategies. Conservative profiles now correctly prioritize bonds over stocks with appropriate cash allocation for liquidity needs.

# Latest Fix Applied
✅ **Portfolio Allocation Synchronization Fix**: Resolved discrepancy between Comprehensive Portfolio Analysis text (showing 70% bonds, 20% stocks, 10% cash) and Portfolio Allocation pie chart (showing 45% bonds, 25% stocks, 15% cash). Root cause was three different allocation data sources using hardcoded defaults instead of risk-appropriate allocations. Implemented smart allocation extraction from AI analysis text, created risk-based default logic, and synchronized all data files and API endpoints to show consistent conservative allocation matching the user's risk profile.

# Final Status
✅ **ALL FAP INTEGRATION TASKS COMPLETED AND TESTED**
- Fixed profile portfolio save endpoint with portfolio_summary field ✅
- Enhanced frontend to generate comprehensive portfolio summary ✅
- Fixed profile update endpoint data flow issue (save profile before allocation generation) ✅
- API endpoints working correctly (200 OK responses) ✅
- Profile portfolio storage and retrieval fully functional ✅
- End-to-end testing successful for all risk profiles:
  * Conservative: 25% stocks, 45% bonds ✅
  * Moderate: 50% stocks, 25% bonds ✅
  * Aggressive: 65% stocks, 15% bonds ✅
- Cross-tab synchronization working correctly ✅
- Frontend and backend integration complete ✅

# Notes
- Keep instructions simple
- Provide clear examples
- Document all steps
- Include troubleshooting
- Consider user experience

# Financial Investment Advisor Agent - AI Assistant Rules

# User Profile
- Target Audience: Non-technical users
- Technical Level: Basic computer literacy
- Goals: Build a functional investment advisor application
- Pain Points: Limited coding experience, need for clear guidance

# Communication Guidelines
1. Use simple, non-technical language
2. Break down complex concepts into smaller, digestible parts
3. Provide step-by-step instructions
4. Include visual examples where possible
5. Explain technical terms in plain language
6. Offer multiple solutions when possible
7. Provide context for each step

# Code Generation Rules
1. Write clear, well-documented code
2. Use meaningful variable and function names
3. Include comments explaining complex logic
4. Follow best practices for readability
5. Implement proper error handling
6. Add type hints for better understanding
7. Keep functions small and focused

# File Structure Guidelines
1. Maintain consistent file organization
2. Use clear file naming conventions
3. Group related files together
4. Keep file sizes manageable
5. Document file purposes

# Testing Guidelines
1. Write clear test cases
2. Explain test purposes
3. Use meaningful test names
4. Include basic error cases
5. Document test requirements

# Documentation Requirements
1. Keep documentation up-to-date
2. Use clear, simple language
3. Include examples
4. Provide context
5. Document assumptions
6. Include troubleshooting guides

# Error Handling
1. Provide clear error messages
2. Include recovery steps
3. Document common issues
4. Offer alternative solutions
5. Explain error causes

# Security Guidelines
1. Protect sensitive data
2. Use environment variables
3. Implement basic authentication
4. Follow security best practices
5. Document security measures

# Performance Guidelines
1. Optimize for readability
2. Consider basic performance
3. Document performance considerations
4. Include basic caching
5. Explain optimization choices

# Maintenance Guidelines
1. Keep code organized
2. Document changes
3. Update dependencies
4. Maintain documentation
5. Follow version control best practices

# Lessons Learned
1. Start with simple implementations
2. Build incrementally
3. Test thoroughly
4. Document as you go
5. Keep security in mind
6. Consider user experience
7. Plan for maintenance

# Scratchpad
Current Task: [ ] Initial Project Setup
Project Status: Planning Phase

## Implementation Phases

### Phase 1: Basic Setup [ ]
[ ] Create project structure
[ ] Set up environment
[ ] Install dependencies
[ ] Configure basic settings

### Phase 2: Core Features [ ]
[ ] Implement basic API
[ ] Create frontend interface
[ ] Add basic functionality
[ ] Implement testing

### Phase 3: Enhancement [ ]
[ ] Add advanced features
[ ] Improve user interface
[ ] Enhance documentation
[ ] Optimize performance

### Phase 4: Finalization [ ]
[ ] Complete testing
[ ] Finalize documentation
[ ] Prepare for deployment
[ ] Create user guide

# Progress Tracking
- [ ] Project initialization
- [ ] Basic setup complete
- [ ] Core features implemented
- [ ] Testing completed
- [ ] Documentation finished
- [ ] Ready for deployment

# Next Steps
1. Complete project setup
2. Implement basic features
3. Add testing
4. Create documentation
5. Prepare for deployment

# Notes
- Keep instructions simple
- Provide clear examples
- Document all steps
- Include troubleshooting
- Consider user experience 
